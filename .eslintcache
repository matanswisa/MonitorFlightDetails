[{"/mnt/c/Users/Sarit/Desktop/MonitorFlightDetailsClient/client/flight-monitor-client/src/index.js":"1","/mnt/c/Users/Sarit/Desktop/MonitorFlightDetailsClient/client/flight-monitor-client/src/reportWebVitals.js":"2","/mnt/c/Users/Sarit/Desktop/MonitorFlightDetailsClient/client/flight-monitor-client/src/App.js":"3","/mnt/c/Users/Sarit/Desktop/MonitorFlightDetailsClient/client/flight-monitor-client/src/VisualFlightMonitor/visualFlightMonitor.js":"4","/mnt/c/Users/Sarit/Desktop/MonitorFlightDetailsClient/client/flight-monitor-client/src/TextualMonitor/textualMonitor.js":"5","/mnt/c/Users/Sarit/Desktop/MonitorFlightDetailsClient/client/flight-monitor-client/src/TextualMonitor/TextMonitorCard/textualMonitorCard.js":"6","/mnt/c/Users/Sarit/Desktop/MonitorFlightDetailsClient/client/flight-monitor-client/src/VisualFlightMonitor/HIS/HISComponent.js":"7","/mnt/c/Users/Sarit/Desktop/MonitorFlightDetailsClient/client/flight-monitor-client/src/VisualFlightMonitor/Altitude/AltitudeComponent.js":"8","/mnt/c/Users/Sarit/Desktop/MonitorFlightDetailsClient/client/flight-monitor-client/src/VisualFlightMonitor/ADIComponent/ADIComponent.js":"9"},{"size":500,"mtime":499162500000,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"11"},{"size":1771,"mtime":1608186925443,"results":"13","hashOfConfig":"11"},{"size":899,"mtime":1608043866599,"results":"14","hashOfConfig":"11"},{"size":1432,"mtime":1608125201430,"results":"15","hashOfConfig":"11"},{"size":578,"mtime":1608043866584,"results":"16","hashOfConfig":"11"},{"size":3869,"mtime":1608125201483,"results":"17","hashOfConfig":"11"},{"size":3024,"mtime":1608186861374,"results":"18","hashOfConfig":"11"},{"size":946,"mtime":1608125201450,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1awsp0s",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/mnt/c/Users/Sarit/Desktop/MonitorFlightDetailsClient/client/flight-monitor-client/src/index.js",[],["43","44"],"/mnt/c/Users/Sarit/Desktop/MonitorFlightDetailsClient/client/flight-monitor-client/src/reportWebVitals.js",[],"/mnt/c/Users/Sarit/Desktop/MonitorFlightDetailsClient/client/flight-monitor-client/src/App.js",[],"/mnt/c/Users/Sarit/Desktop/MonitorFlightDetailsClient/client/flight-monitor-client/src/VisualFlightMonitor/visualFlightMonitor.js",["45"],"import React, { Component } from 'react';\r\nimport AltitudeComponent from './Altitude/AltitudeComponent';\r\nimport HSIComponent from './HIS/HISComponent';\r\nimport ADIComponent from './ADIComponent/ADIComponent.js'\r\n\r\nclass VisualMonitor extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"visual\">\r\n        <h1 class=\"display-5\">Visual Flight Monitor</h1>\r\n        <div className=\"row\">\r\n          <div className=\"col\">\r\n            <AltitudeComponent altitude={this.props.FlightCords.altitude} />\r\n          </div>\r\n          <div className=\"col\">\r\n\r\n            <HSIComponent HIS={this.props.FlightCords.his} />\r\n          </div>\r\n          <div className=\"col\">\r\n            <ADIComponent ADI={this.props.FlightCords.adi} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default VisualMonitor;\r\n","/mnt/c/Users/Sarit/Desktop/MonitorFlightDetailsClient/client/flight-monitor-client/src/TextualMonitor/textualMonitor.js",["46"],"import React, { Component } from 'react';\r\nimport TextualMonitorCard from './TextMonitorCard/textualMonitorCard.js';\r\n\r\n/** \r\n * Returns array with json objects\r\n * \r\n * @param {jsonObject} jsonObject the javascript object who contains keys and values pairs\r\n * \r\n * \r\n * **/\r\nconst convertJsonToArray = (jsonObject) => {\r\n    const jsonObjectsArray = [];\r\n    for (var key in jsonObject) {\r\n        if (jsonObject.hasOwnProperty(key)) {\r\n            var val = jsonObject[key];\r\n            console.log(key, val);\r\n            jsonObjectsArray.push({ key: key, val: val })\r\n        }\r\n    }\r\n    return jsonObjectsArray;\r\n}\r\n\r\nclass TextualMonitor extends Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"textual\">\r\n                        <div className=\"container\" style={{margin:\"0 auto\"}}>\r\n                            <h1 className=\"display-5\" style={{marginBottom:\"2.5rem\"}}>Textual Monitor</h1>\r\n                           <div class=\"row\" style={{margin:\"0 auto\" ,marginLeft: \"10%\"}}>\r\n                            {convertJsonToArray(this.props.FlightCords).map(el => {\r\n                                return <TextualMonitorCard name={el.key} value={el.val} />\r\n                            })}\r\n                           </div>\r\n                        </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default TextualMonitor;\r\n","/mnt/c/Users/Sarit/Desktop/MonitorFlightDetailsClient/client/flight-monitor-client/src/TextualMonitor/TextMonitorCard/textualMonitorCard.js",["47"],"import React, { Component } from 'react';\r\n\r\nclass TextualMonitorCard extends Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div class=\"col-sm-4 card text-white bg-dark mb-3\" style={{maxWidth: \"18rem\",margin:\"10px\",padding:\"5px\"}}>\r\n            <div class=\"card-body\">\r\n              <h5 class=\"card-title card-header\">{this.props.name}</h5>\r\n              <p class=\"card-text\">{this.props.value}</p>\r\n            </div>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default TextualMonitorCard;\r\n\r\n\r\n\r\n","/mnt/c/Users/Sarit/Desktop/MonitorFlightDetailsClient/client/flight-monitor-client/src/VisualFlightMonitor/HIS/HISComponent.js",["48"],"import React, { Component } from 'react';\r\nimport imgSrc from './arrowUp.png'\r\n\r\nclass HISComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.ctx = this.canvas = this.upperArrowImg = this.radius = null;\r\n    }\r\n\r\n    /**\r\n     * Draws the HIS monitor\r\n     */\r\n    componentDidUpdate(){\r\n        this.drawHISMonitor(this.props.HIS,this.ctx);\r\n    }\r\n\r\n    /**\r\n     * Initilaize the canvas \r\n     */\r\n    componentDidMount() {\r\n        this.upperArrowImg = this.refs.image;\r\n        this.canvas = this.refs.canvas;\r\n        this.ctx = this.canvas.getContext(\"2d\");\r\n\r\n        this.radius = this.canvas.height / 2;\r\n        this.ctx.translate(this.radius, this.radius);\r\n        this.radius = this.radius * 0.90;\r\n\r\n        this.forceUpdate();\r\n    }\r\n\r\n    /**\r\n     * Draws the HIS monitor\r\n     * @param {*} his the HIS angle value\r\n     * @param {*} ctx the object that responsible to draw on canvas\r\n     */\r\n    drawHISMonitor(his, ctx) {\r\n        ctx.save();\r\n        this.rotateHISMonitor(ctx, this.radius, his);\r\n        this.drawAngles(ctx, this.radius);\r\n        ctx.restore();\r\n        this.drawUpperArrow(ctx, this.upperArrowImg)\r\n        \r\n    }\r\n\r\n    /**\r\n     * Rotates the monitor by the HIS value\r\n     * \r\n     * @param {*} ctx the object that responsible to draw on canvas\r\n     * @param {*} radius the radius of the monitor circle\r\n     * @param {*} his the HIS angle value\r\n     */\r\n    rotateHISMonitor(ctx, radius, his) {\r\n        ctx.beginPath();\r\n        this.drawHISBorder(ctx, radius)\r\n        ctx.rotate(his * Math.PI / 180)\r\n    }\r\n\r\n    /**\r\n     * Draws all the angles on the HIS monitor\r\n     * @param {*} ctx the object that responsible to draw on canvas\r\n     * @param {*} radius the radius of the monitor circle\r\n     */\r\n    drawAngles(ctx, radius) {\r\n        var calculatedAngle;\r\n        ctx.fillStyle = '#333'\r\n        ctx.font = radius * 0.15 + \"px arial\";\r\n        ctx.textBaseline = \"middle\";\r\n        ctx.textAlign = \"center\";\r\n        for (let angle = 0; angle < 360; angle += 90) {\r\n            calculatedAngle = angle * Math.PI / (-12);\r\n            ctx.rotate(calculatedAngle);\r\n            ctx.translate(0, -radius * 0.85);\r\n            ctx.rotate(-calculatedAngle);\r\n            ctx.fillText(angle.toString(), 0, 0);\r\n            ctx.rotate(calculatedAngle);\r\n            ctx.translate(0, radius * 0.85);\r\n            ctx.rotate(-calculatedAngle);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draws the border of the HIS monitor\r\n     * @param {*} ctx the object that responsible to draw on canvas\r\n     * @param {*} radius the radius of the monitor circle\r\n     */\r\n    drawHISBorder(ctx, radius) {\r\n        ctx.arc(0, 0, radius, 0, 2 * Math.PI);\r\n        ctx.fillStyle = 'white';\r\n        ctx.fill();\r\n        let grad = ctx.createRadialGradient(0, 0, radius * 0.95, 0, 0, radius * 1.05);\r\n        grad.addColorStop(0, '#333');\r\n        grad.addColorStop(0.5, 'white');\r\n        grad.addColorStop(1, '#333');\r\n        ctx.strokeStyle = grad;\r\n        ctx.lineWidth = radius * 0.1;\r\n        ctx.stroke();\r\n        ctx.beginPath();\r\n    }\r\n\r\n    /**\r\n     * Draw upper arrow image in the center of the monitor\r\n     * @param {*} ctx the object that responsible to draw on canvas\r\n     * @param {*} img the upper arrow img\r\n     */\r\n    drawUpperArrow(ctx, img) {\r\n        ctx.drawImage(img, -img.width / 2, -img.height / 2, 50, 50);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <canvas ref=\"canvas\" id=\"canvas\" width=\"275\" height=\"275\">\r\n                </canvas>\r\n                <div style={{ display: \"none\" }}>\r\n                    <img ref=\"image\" id=\"arrow\" width=\"50\" height=\"50\" src={imgSrc} style={{ position: \"static\" }} className=\"hidden\" />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HISComponent;\r\n","/mnt/c/Users/Sarit/Desktop/MonitorFlightDetailsClient/client/flight-monitor-client/src/VisualFlightMonitor/Altitude/AltitudeComponent.js",[],"/mnt/c/Users/Sarit/Desktop/MonitorFlightDetailsClient/client/flight-monitor-client/src/VisualFlightMonitor/ADIComponent/ADIComponent.js",[],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":8,"column":3,"nodeType":"55","messageId":"56","endLine":10,"endColumn":4},{"ruleId":"53","severity":1,"message":"54","line":24,"column":5,"nodeType":"55","messageId":"56","endLine":26,"endColumn":6},{"ruleId":"53","severity":1,"message":"54","line":4,"column":5,"nodeType":"55","messageId":"56","endLine":6,"endColumn":6},{"ruleId":"57","severity":1,"message":"58","line":116,"column":21,"nodeType":"59","endLine":116,"endColumn":137},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]